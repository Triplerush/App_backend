// Doctor.java
package com.example.demo.dao.doctor;

import com.example.demo.dao.user.User;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Entity
@Table(name = "doctors")
@NoArgsConstructor
@AllArgsConstructor
public class Doctor {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_doctor")
    private Long idDoctor;

    @OneToOne
    @JoinColumn(name = "id_user")
    private User user;
    private String specialty;
    private String phone;
    private boolean active = true;
}
package com.example.demo.dao.doctor;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface DoctorRepository extends JpaRepository<Doctor, Long> {
    Page<Doctor> findByActiveTrue(Pageable pagination);
    Optional<Doctor> findByIdDoctor(Long id);
}
// Doctor DTOs
package com.example.demo.dao.doctor.dto;

import jakarta.validation.constraints.NotNull;

public record CreateDoctorDTO(
        @NotNull String username,
        @NotNull String email,
        @NotNull String password,
        String specialty,
        String phone
) {}
package com.example.demo.dao.doctor.dto;

import com.example.demo.dao.user.dto.UserDTO;

public record DoctorDTO(
        Long idDoctor,
        UserDTO user,
        String specialty,
        String phone,
        boolean active
) {}
package com.example.demo.dao.doctor.dto;

public record UpdateDoctorDTO(
        String username,
        String specialty,
        String phone,
        String password
) {}
package com.example.demo.dao.measurement.dto;

import jakarta.validation.constraints.NotNull;
import java.util.Date;

public record MeasurementDTO(
        Long idMeasurement,
        @NotNull Long patientId,
        @NotNull Date measurementDate,
        int systolicPressure,
        int diastolicPressure,
        int heartRate,
        String notes,
        boolean active
) {}
package com.example.demo.dao.measurement;

import com.example.demo.dao.patient.Patient;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data
@Entity
@Table(name = "measurements")
@NoArgsConstructor
@AllArgsConstructor
public class Measurement {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_measurement")
    private Long idMeasurement;

    @ManyToOne
    @JoinColumn(name = "id_patient")
    private Patient patient;

    @Column(name = "measurement_date")
    private Date measurementDate;

    @Column(name = "systolic_pressure")
    private int systolicPressure;
    @Column(name = "diastolic_pressure")
    private int diastolicPressure;
    @Column(name = "heart_rate")
    private int heartRate;

    private String notes;
    private boolean active = true;
}
package com.example.demo.dao.measurement;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface MeasurementRepository extends JpaRepository<Measurement, Long> {
    Page<Measurement> findByActiveTrue(Pageable pagination);
    List<Measurement> findByPatient_idPatientAndActiveTrue(Long patientId);
}
package com.example.demo.dao.medication.dto;

import jakarta.validation.constraints.NotNull;
import java.util.Date;

public record MedicationDTO(
        Long idMedication,
        @NotNull Long patientId,
        @NotNull String medicationName,
        @NotNull String dosage,
        @NotNull String frequency,
        @NotNull Date treatmentStart,
        Date treatmentEnd,
        boolean active
) {}
package com.example.demo.dao.medication;

import com.example.demo.dao.patient.Patient;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data
@Entity
@Table(name = "medications")
@NoArgsConstructor
@AllArgsConstructor
public class Medication {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_medication")
    private Long idMedication;

    @ManyToOne
    @JoinColumn(name = "id_patient")
    private Patient patient;

    @Column(name = "medication_name")
    private String medicationName;
    private String dosage;
    private String frequency;

    @Column(name = "treatment_start")
    private Date treatmentStart;

    @Column(name = "treatment_end")
    private Date treatmentEnd;

    private boolean active = true;
}
package com.example.demo.dao.medication;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface MedicationRepository extends JpaRepository<Medication, Long> {
    Page<Medication> findByActiveTrue(Pageable pagination);
    List<Medication> findByPatient_idPatientAndActiveTrue(Long patientId);

}
package com.example.demo.dao.patient.dto;

import jakarta.validation.constraints.NotNull;

public record CreatePatientDTO(
        @NotNull String username,
        @NotNull String email,
        @NotNull String password,
        @NotNull int age,
        char gender,
        float weight,
        float height
) {}
package com.example.demo.dao.patient.dto;

import com.example.demo.dao.doctor.dto.DoctorDTO;
import com.example.demo.dao.stratum.dto.StratumDTO;
import com.example.demo.dao.user.dto.UserDTO;

import java.util.Date;

public record PatientDTO(
        Long idPatient,
        UserDTO user,
        DoctorDTO doctor,
        StratumDTO stratum,
        int age,
        char gender,
        float weight,
        float height,
        String medicalConditions,
        boolean active,
        Date registrationDate
) {}
package com.example.demo.dao.patient.dto;

public record UpdatePatientDTO(
        Long idDoctor,
        Long idStratum,
        int age,
        char gender,
        float weight,
        float height,
        String medicalConditions
) {}
package com.example.demo.dao.patient;

import com.example.demo.dao.user.User;
import com.example.demo.dao.doctor.Doctor;
import com.example.demo.dao.stratum.Stratum;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data
@Entity
@Table(name = "patients")
@NoArgsConstructor
@AllArgsConstructor
public class Patient {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_patient")
    private Long idPatient;

    @OneToOne
    @JoinColumn(name = "id_user")
    private User user;

    @ManyToOne
    @JoinColumn(name = "id_doctor")
    private Doctor doctor;

    @ManyToOne
    @JoinColumn(name = "id_stratum")
    private Stratum stratum;

    private int age;
    private char gender;
    private float weight;
    private float height;
    @Column(name = "medical_conditions")
    private String medicalConditions;
    private boolean active = true;
    @Column(name = "registration_date")
    private Date registrationDate;
}
package com.example.demo.dao.patient;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface PatientRepository extends JpaRepository<Patient, Long> {
    Page<Patient> findByActiveTrue(Pageable pageable);
    Optional<Patient> findByIdPatient(Long id);
}
package com.example.demo.dao.recommendation.dto;

import jakarta.validation.constraints.NotBlank;

public record CreateRecommendationDTO(
        @NotBlank String content
) {
}package com.example.demo.dao.recommendation.dto;

import java.util.Set;

public record RecommendationDTO(
        Long id,
        String content,
        boolean active
) { }
package com.example.demo.dao.recommendation;

import com.example.demo.dao.stratum.Stratum;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

import java.util.Set;

@Data
@Entity
@Table(name = "recommendations")
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(onlyExplicitlyIncluded = true) // Solo incluir campos explícitos en equals/hashCode
public class Recommendation {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_recommendation")
    @EqualsAndHashCode.Include // Incluir este campo en equals y hashCode
    private Long idRecommendation;

    @Column(nullable = false)
    private String content;

    private boolean active = true;

    @ManyToMany(mappedBy = "recommendations")
    @JsonIgnore
    private Set<Stratum> strata;

    // La colección strata se excluye de equals y hashCode
}
package com.example.demo.dao.recommendation;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface RecommendationRepository extends JpaRepository<Recommendation, Long> {
    Page<Recommendation> findByActiveTrue(Pageable pageable);
    Optional<Recommendation> findByIdRecommendation(Long id);
}
package com.example.demo.dao.stratum.dto;

import com.example.demo.dao.recommendation.Recommendation;
import jakarta.validation.constraints.NotBlank;

import java.util.Set;

public record CreateStratumDTO(
        @NotBlank String stratumName,
        Set<Recommendation> recommendations,
        String description
) {}

package com.example.demo.dao.stratum.dto;

public record StratumDTO(
        Long idStratum,
        String stratumName,
        String description,
        boolean active
) {}
package com.example.demo.dao.stratum.dto;

import java.util.Set;

public record UpdateStratumDTO(
        String stratumName,
        String description,
        Set<Long> recommendationIds
) {
}
package com.example.demo.dao.stratum;

import com.example.demo.dao.recommendation.Recommendation;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

import java.util.Set;

@Data
@Entity
@Table(name = "strata")
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(onlyExplicitlyIncluded = true) // Solo incluir campos explícitos en equals/hashCode
public class Stratum {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_stratum")
    @EqualsAndHashCode.Include // Incluir este campo en equals y hashCode
    private Long idStratum;

    @Column(name = "stratum_name", nullable = false)
    private String stratumName;

    private String description;
    private boolean active = true;

    @ManyToMany
    @JoinTable(
            name = "strata_recommendations",
            joinColumns = @JoinColumn(name = "id_stratum"),
            inverseJoinColumns = @JoinColumn(name = "id_recommendation")
    )
    private Set<Recommendation> recommendations;

    // La colección recommendations se excluye de equals y hashCode
}
package com.example.demo.dao.stratum;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface StratumRepository extends JpaRepository<Stratum, Long> {
    Page<Stratum> findByActiveTrue(Pageable pageable);
    Optional<Stratum> findByIdStratum(Long id);
}
package com.example.demo.dao.user.dto;

import com.example.demo.dao.user.Role;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;


public record CreateUserDTO(
        @NotBlank @Size(max = 255) String username,
        @NotBlank @Email @Size(max = 255) String email,
        @NotBlank @Size(min = 8, max = 255) String password,
        @NotNull Role role,
        String token
) {}


package com.example.demo.dao.user.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

public record UpdateUserDTO(
        @Size(max = 255) String username,
        @Size(min = 8, max = 255) String password
) {}


package com.example.demo.dao.user.dto;

import com.example.demo.dao.user.Role;

public record UserDTO(
        Long idUser,
        String username,
        String email,
        Role role,
        Boolean active,
        String token
) {}
package com.example.demo.dao.user;

public enum Role {
    PATIENT,
    DOCTOR,
    ADMIN,
}
package com.example.demo.dao.user;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Entity
@Table(name = "users")
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_user")
    private Long idUser;

    private String name;
    private String email;
    private String password;

    @Column(name = "token", nullable = true) // Nueva columna token
    private String token;

    @Enumerated(EnumType.STRING)
    private Role role;
    private boolean active = true;
}
package com.example.demo.dao.user;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long>{

    Page<User> findByActiveTrue(Pageable pagination);
    Optional<User> findByIdUser(Long id);

}package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

}
// DoctorService.java
package com.example.demo.service.doctor;

import com.example.demo.dao.doctor.dto.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.Optional;

public interface DoctorService {
    Page<DoctorDTO> listDoctors(Pageable pageable);
    Optional<DoctorDTO> findDoctorById(Long id);
    DoctorDTO createDoctor(CreateDoctorDTO request);
    DoctorDTO updateDoctor(Long id, UpdateDoctorDTO request);
    void deleteDoctor(Long id);
}package com.example.demo.service.doctor;

import com.example.demo.dao.doctor.Doctor;
import com.example.demo.dao.doctor.DoctorRepository;
import com.example.demo.dao.doctor.dto.CreateDoctorDTO;
import com.example.demo.dao.doctor.dto.DoctorDTO;
import com.example.demo.dao.doctor.dto.UpdateDoctorDTO;
import com.example.demo.dao.user.Role;
import com.example.demo.dao.user.User;
import com.example.demo.dao.user.dto.CreateUserDTO;
import com.example.demo.dao.user.dto.UpdateUserDTO;
import com.example.demo.dao.user.dto.UserDTO;
import com.example.demo.service.user.UserService;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
@Transactional
@AllArgsConstructor
public class DoctorServiceImpl implements DoctorService {

    private final DoctorRepository doctorRepository;
    private final UserService userService;

    @Override
    @Transactional(readOnly = true)
    public Page<DoctorDTO> listDoctors(Pageable pageable) {
        return doctorRepository.findByActiveTrue(pageable)
                .map(this::mapToDoctorDTO);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<DoctorDTO> findDoctorById(Long id) {
        return doctorRepository.findById(id)
                .map(this::mapToDoctorDTO);
    }

    @Override
    public DoctorDTO createDoctor(CreateDoctorDTO request) {
        User user = userService.createUser(new CreateUserDTO(
                request.username(),
                request.email(),
                request.password(),
                Role.DOCTOR,
                null
        ));

        Doctor doctor = new Doctor();
        doctor.setUser(user);
        doctor.setSpecialty(request.specialty());
        doctor.setPhone(request.phone());

        return mapToDoctorDTO(doctorRepository.save(doctor));
    }

    @Override
    public DoctorDTO updateDoctor(Long id, UpdateDoctorDTO request) {
        return doctorRepository.findById(id)
                .map(doctor -> {
                    updateDoctorDetails(doctor, request);
                    return mapToDoctorDTO(doctorRepository.save(doctor));
                })
                .orElseThrow(() -> new RuntimeException("Doctor not found with ID: " + id));
    }

    @Override
    public void deleteDoctor(Long id) {
        doctorRepository.findById(id)
                .ifPresentOrElse(this::deactivateDoctor,
                        () -> { throw new RuntimeException("Doctor not found with ID: " + id); });
    }

    private void updateDoctorDetails(Doctor doctor, UpdateDoctorDTO request) {
        doctor.setSpecialty(request.specialty());
        doctor.setPhone(request.phone());

        User user = doctor.getUser();
        if (request.username() != null) {
            user.setName(request.username());
        }

        if (request.password() != null && !request.password().isEmpty()) {
            user.setPassword(request.password());
            userService.updateUser(user.getIdUser(), new UpdateUserDTO(user.getName(), user.getPassword()));
        }
    }

    private void deactivateDoctor(Doctor doctor) {
        doctor.setActive(false);
        User user = doctor.getUser();
        user.setActive(false);
        userService.updateUser(user.getIdUser(), new UpdateUserDTO(user.getName(), user.getPassword()));
        doctorRepository.save(doctor);
    }

    private DoctorDTO mapToDoctorDTO(Doctor doctor) {
        return new DoctorDTO(
                doctor.getIdDoctor(),
                mapToUserDTO(doctor.getUser()),
                doctor.getSpecialty(),
                doctor.getPhone(),
                doctor.isActive()
        );
    }

    private UserDTO mapToUserDTO(User user) {
        return new UserDTO(
                user.getIdUser(),
                user.getName(),
                user.getEmail(),
                user.getRole(),
                user.isActive(),
                user.getToken()
        );
    }
}package com.example.demo.service.measurement;

import com.example.demo.dao.measurement.dto.MeasurementDTO;
import java.util.List;

public interface MeasurementService {
    List<MeasurementDTO> listByPatientId(Long patientId);
    MeasurementDTO createMeasurement(MeasurementDTO request);
    MeasurementDTO updateMeasurement(Long id, MeasurementDTO request);
    void deleteMeasurement(Long id);
}
package com.example.demo.service.measurement;

import com.example.demo.dao.measurement.Measurement;
import com.example.demo.dao.measurement.MeasurementRepository;
import com.example.demo.dao.measurement.dto.MeasurementDTO;
import com.example.demo.dao.patient.PatientRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
@AllArgsConstructor
public class MeasurementServiceImpl implements MeasurementService {

    private final MeasurementRepository measurementRepository;
    private final PatientRepository patientRepository;

    @Override
    @Transactional(readOnly = true)
    public List<MeasurementDTO> listByPatientId(Long patientId) {
        return measurementRepository.findByPatient_idPatientAndActiveTrue(patientId)
                .stream()
                .map(measurement -> new MeasurementDTO(
                        measurement.getIdMeasurement(),
                        measurement.getPatient().getIdPatient(),
                        measurement.getMeasurementDate(),
                        measurement.getSystolicPressure(),
                        measurement.getDiastolicPressure(),
                        measurement.getHeartRate(),
                        measurement.getNotes(),
                        measurement.isActive()
                ))
                .collect(Collectors.toList());
    }

    @Override
    public MeasurementDTO createMeasurement(MeasurementDTO request) {
        Measurement measurement = new Measurement();
        measurement.setPatient(patientRepository.findById(request.patientId())
                .orElseThrow(() -> new RuntimeException("Patient not found")));
        measurement.setMeasurementDate(request.measurementDate());
        measurement.setSystolicPressure(request.systolicPressure());
        measurement.setDiastolicPressure(request.diastolicPressure());
        measurement.setHeartRate(request.heartRate());
        measurement.setNotes(request.notes());
        measurement.setActive(request.active());

        measurement = measurementRepository.save(measurement);
        return mapToMeasurementDTO(measurement);
    }

    @Override
    public MeasurementDTO updateMeasurement(Long id, MeasurementDTO request) {
        return measurementRepository.findById(id)
                .map(measurement -> {
                    measurement.setMeasurementDate(request.measurementDate());
                    measurement.setSystolicPressure(request.systolicPressure());
                    measurement.setDiastolicPressure(request.diastolicPressure());
                    measurement.setHeartRate(request.heartRate());
                    measurement.setNotes(request.notes());
                    Measurement updatedMeasurement = measurementRepository.save(measurement);
                    return mapToMeasurementDTO(updatedMeasurement);
                }).orElseThrow(() -> new RuntimeException("Measurement not found"));
    }

    @Override
    public void deleteMeasurement(Long id) {
        measurementRepository.findById(id).ifPresent(measurement -> {
            measurement.setActive(false);
            measurementRepository.save(measurement);
        });
    }

    private MeasurementDTO mapToMeasurementDTO(Measurement measurement) {
        return new MeasurementDTO(
                measurement.getIdMeasurement(),
                measurement.getPatient().getIdPatient(),
                measurement.getMeasurementDate(),
                measurement.getSystolicPressure(),
                measurement.getDiastolicPressure(),
                measurement.getHeartRate(),
                measurement.getNotes(),
                measurement.isActive()
        );
    }
}
package com.example.demo.service.medication;

import com.example.demo.dao.medication.dto.MedicationDTO;
import com.example.demo.dao.patient.dto.CreatePatientDTO;
import com.example.demo.dao.patient.dto.PatientDTO;
import com.example.demo.dao.patient.dto.UpdatePatientDTO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Optional;

public interface MedicationService {
    List<MedicationDTO> listByPatientId(Long patientId);
    MedicationDTO createMedication(MedicationDTO request);
    MedicationDTO updateMedication(Long id, MedicationDTO request);
    void deleteMedication(Long id);
}
package com.example.demo.service.medication;

import com.example.demo.dao.medication.Medication;
import com.example.demo.dao.medication.MedicationRepository;
import com.example.demo.dao.medication.dto.MedicationDTO;
import com.example.demo.dao.patient.PatientRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
@AllArgsConstructor
public class MedicationServiceImpl implements MedicationService {

    private final MedicationRepository medicationRepository;
    private final PatientRepository patientRepository;

    @Override
    @Transactional(readOnly = true)
    public List<MedicationDTO> listByPatientId(Long patientId) {
        return medicationRepository.findByPatient_idPatientAndActiveTrue(patientId)
                .stream()
                .map(med -> new MedicationDTO(
                        med.getIdMedication(),
                        med.getPatient().getIdPatient(),
                        med.getMedicationName(),
                        med.getDosage(),
                        med.getFrequency(),
                        med.getTreatmentStart(),
                        med.getTreatmentEnd(),
                        med.isActive()
                ))
                .collect(Collectors.toList());
    }

    @Override
    public MedicationDTO createMedication(MedicationDTO request) {
        Medication medication = new Medication();
        medication.setPatient(patientRepository.findById(request.patientId())
                .orElseThrow(() -> new RuntimeException("Patient not found")));
        medication.setMedicationName(request.medicationName());
        medication.setDosage(request.dosage());
        medication.setFrequency(request.frequency());
        medication.setTreatmentStart(request.treatmentStart());
        medication.setTreatmentEnd(request.treatmentEnd());
        medication.setActive(request.active());

        medication = medicationRepository.save(medication);
        return mapToMedicationDTO(medication);
    }

    @Override
    public MedicationDTO updateMedication(Long id, MedicationDTO request) {
        return medicationRepository.findById(id)
                .map(medication -> {
                    medication.setMedicationName(request.medicationName());
                    medication.setDosage(request.dosage());
                    medication.setFrequency(request.frequency());
                    medication.setTreatmentStart(request.treatmentStart());
                    medication.setTreatmentEnd(request.treatmentEnd());
                    Medication updatedMedication = medicationRepository.save(medication);
                    return mapToMedicationDTO(updatedMedication);
                }).orElseThrow(() -> new RuntimeException("Medication not found"));
    }

    @Override
    public void deleteMedication(Long id) {
        medicationRepository.findById(id).ifPresent(medication -> {
            medication.setActive(false);
            medicationRepository.save(medication);
        });
    }

    private MedicationDTO mapToMedicationDTO(Medication medication) {
        return new MedicationDTO(
                medication.getIdMedication(),
                medication.getPatient().getIdPatient(),
                medication.getMedicationName(),
                medication.getDosage(),
                medication.getFrequency(),
                medication.getTreatmentStart(),
                medication.getTreatmentEnd(),
                medication.isActive()
        );
    }
}
package com.example.demo.service.patient;

import com.example.demo.dao.patient.dto.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.Optional;

public interface PatientService {
    Page<PatientDTO> listPatients(Pageable pageable);
    Optional<PatientDTO> findPatientById(Long id);
    PatientDTO createPatient(CreatePatientDTO request);
    PatientDTO updatePatient(Long id, UpdatePatientDTO request);
    void deletePatient(Long id);
}
package com.example.demo.service.patient;

import com.example.demo.dao.doctor.Doctor;
import com.example.demo.dao.doctor.DoctorRepository;
import com.example.demo.dao.doctor.dto.DoctorDTO;
import com.example.demo.dao.patient.Patient;
import com.example.demo.dao.patient.PatientRepository;
import com.example.demo.dao.patient.dto.*;
import com.example.demo.dao.stratum.Stratum;
import com.example.demo.dao.stratum.StratumRepository;
import com.example.demo.dao.stratum.dto.StratumDTO;
import com.example.demo.dao.user.Role;
import com.example.demo.dao.user.User;
import com.example.demo.dao.user.UserRepository;
import com.example.demo.dao.user.dto.CreateUserDTO;
import com.example.demo.dao.user.dto.UserDTO;
import com.example.demo.service.user.UserService;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.ObjectUtils;

import java.util.Optional;

@Service
@Transactional
@AllArgsConstructor
public class PatientServiceImpl implements PatientService {

    private final PatientRepository patientRepository;
    private final UserRepository userRepository;
    private final DoctorRepository doctorRepository;
    private final StratumRepository stratumRepository;
    private final UserService userService;

    @Override
    @Transactional(readOnly = true)
    public Page<PatientDTO> listPatients(Pageable pageable) {
        return patientRepository.findByActiveTrue(pageable)
                .map(this::toPatientDTO);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<PatientDTO> findPatientById(Long id) {
        return patientRepository.findByIdPatient(id)
                .map(this::toPatientDTO);
    }

    @Override
    public PatientDTO createPatient(CreatePatientDTO request) {
        User user = userService.createUser(new CreateUserDTO(
                request.username(),
                request.email(),
                request.password(),
                Role.PATIENT,
                null
        ));

        Patient patient = new Patient();
        patient.setUser(user);
        setPatientDetails(patient, request);
        patient = patientRepository.save(patient);

        return toPatientDTO(patient);
    }

    @Override
    public PatientDTO updatePatient(Long id, UpdatePatientDTO request) {
        return patientRepository.findById(id)
                .map(patient -> {
                    updateDoctor(request, patient);
                    updateStratum(request, patient);
                    updatePatientDetails(request, patient);

                    Patient updatedPatient = patientRepository.save(patient);
                    return toPatientDTO(updatedPatient);
                })
                .orElseThrow(() -> new RuntimeException("Patient not found with ID: " + id));
    }

    @Override
    public void deletePatient(Long id) {
        patientRepository.findById(id)
                .ifPresentOrElse(patient -> {
                    patient.setActive(false);
                    patientRepository.save(patient);
                }, () -> {
                    throw new RuntimeException("Patient not found with ID: " + id);
                });
    }

    private void setPatientDetails(Patient patient, CreatePatientDTO request) {
        patient.setAge(request.age());
        patient.setGender(request.gender());
        patient.setWeight(request.weight());
        patient.setHeight(request.height());
        patient.setRegistrationDate(new java.util.Date());
        patient.setActive(true);
    }

    private void updateDoctor(UpdatePatientDTO request, Patient patient) {
        if (request.idDoctor() != null) {
            doctorRepository.findById(request.idDoctor()).ifPresent(patient::setDoctor);
        }
    }

    private void updateStratum(UpdatePatientDTO request, Patient patient) {
        if (request.idStratum() != null) {
            stratumRepository.findById(request.idStratum()).ifPresent(patient::setStratum);
        }
    }

    private void updatePatientDetails(UpdatePatientDTO request, Patient patient) {
        if (request.age() >= 0) patient.setAge(request.age());
        if (!ObjectUtils.isEmpty(request.gender())) patient.setGender(request.gender());
        if (request.weight() >= 0) patient.setWeight(request.weight());
        if (request.height() >= 0) patient.setHeight(request.height());
        if (request.medicalConditions() != null) patient.setMedicalConditions(request.medicalConditions());
    }

    private PatientDTO toPatientDTO(Patient patient) {
        return new PatientDTO(
                patient.getIdPatient(),
                toUserDTO(patient.getUser()),
                toDoctorDTO(patient.getDoctor()),
                toStratumDTO(patient.getStratum()),
                patient.getAge(),
                patient.getGender(),
                patient.getWeight(),
                patient.getHeight(),
                patient.getMedicalConditions(),
                patient.isActive(),
                patient.getRegistrationDate()
        );
    }

    private UserDTO toUserDTO(User user) {
        return new UserDTO(
                user.getIdUser(),
                user.getName(),
                user.getEmail(),
                user.getRole(),
                user.isActive(),
                user.getToken()
        );
    }

    private DoctorDTO toDoctorDTO(Doctor doctor) {
        if (doctor == null) return null;
        return new DoctorDTO(
                doctor.getIdDoctor(),
                toUserDTO(doctor.getUser()),
                doctor.getSpecialty(),
                doctor.getPhone(),
                doctor.isActive()
        );
    }

    private StratumDTO toStratumDTO(Stratum stratum) {
        if (stratum == null) return null;
        return new StratumDTO(
                stratum.getIdStratum(),
                stratum.getStratumName(),
                stratum.getDescription(),
                stratum.isActive()
        );
    }
}
package com.example.demo.service.recommendation;

import com.example.demo.dao.recommendation.dto.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.Optional;

public interface RecommendationService {
    Page<RecommendationDTO> listRecommendations(Pageable pageable);
    Optional<RecommendationDTO> findById(Long id);
    RecommendationDTO create(CreateRecommendationDTO request);
    RecommendationDTO update(Long id, CreateRecommendationDTO request);
    void delete(Long id);
}
package com.example.demo.service.recommendation;

import com.example.demo.dao.recommendation.*;
import com.example.demo.dao.recommendation.dto.*;
import com.example.demo.dao.stratum.StratumRepository;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
@AllArgsConstructor
@Transactional
public class RecommendationServiceImpl implements RecommendationService {

    private final RecommendationRepository recommendationRepository;
    private final StratumRepository stratumRepository;

    @Override
    @Transactional(readOnly = true)
    public Page<RecommendationDTO> listRecommendations(Pageable pageable) {
        return recommendationRepository.findByActiveTrue(pageable)
                .map(this::toDTO);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<RecommendationDTO> findById(Long id) {
        return recommendationRepository.findByIdRecommendation(id)
                .map(this::toDTO);
    }

    @Override
    public RecommendationDTO create(CreateRecommendationDTO request) {
        Recommendation recommendation = new Recommendation();
        recommendation.setContent(request.content());
        recommendation.setActive(true);

        return toDTO(recommendationRepository.save(recommendation));
    }

    @Override
    public RecommendationDTO update(Long id, CreateRecommendationDTO request) {
        return recommendationRepository.findById(id)
                .map(recommendation -> {
                    recommendation.setContent(request.content());
                    return toDTO(recommendationRepository.save(recommendation));
                })
                .orElseThrow(() -> new RuntimeException("Recommendation not found."));
    }

    @Override
    public void delete(Long id) {
        recommendationRepository.findById(id)
                .ifPresentOrElse(recommendation -> {
                    recommendation.setActive(false);
                    recommendationRepository.save(recommendation);
                }, () -> {
                    throw new RuntimeException("Recommendation not found.");
                });
    }

    private RecommendationDTO toDTO(Recommendation recommendation) {
        return new RecommendationDTO(
                recommendation.getIdRecommendation(),
                recommendation.getContent(),
                recommendation.isActive()
        );
    }
}package com.example.demo.service.stratum;

import com.example.demo.dao.stratum.dto.CreateStratumDTO;
import com.example.demo.dao.stratum.dto.StratumDTO;
import com.example.demo.dao.stratum.dto.UpdateStratumDTO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.Optional;

public interface StratumService {
    Page<StratumDTO> listStrata(Pageable pageable);
    Optional<StratumDTO> findStratumById(Long id);
    StratumDTO createStratum(CreateStratumDTO request);
    StratumDTO updateStratum(Long id, UpdateStratumDTO request);
    void deleteStratum(Long id);
}

package com.example.demo.service.stratum;

import com.example.demo.dao.recommendation.Recommendation;
import com.example.demo.dao.recommendation.RecommendationRepository;
import com.example.demo.dao.stratum.Stratum;
import com.example.demo.dao.stratum.StratumRepository;
import com.example.demo.dao.stratum.dto.CreateStratumDTO;
import com.example.demo.dao.stratum.dto.StratumDTO;
import com.example.demo.dao.stratum.dto.UpdateStratumDTO;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@Transactional
@AllArgsConstructor
public class StratumServiceImpl implements StratumService {

    private final StratumRepository stratumRepository;
    private final RecommendationRepository recommendationRepository;

    @Override
    @Transactional(readOnly = true)
    public Page<StratumDTO> listStrata(Pageable pageable) {
        return stratumRepository.findByActiveTrue(pageable)
                .map(this::toDTO);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<StratumDTO> findStratumById(Long id) {
        return stratumRepository.findByIdStratum(id)
                .map(this::toDTO);
    }

    @Override
    public StratumDTO createStratum(CreateStratumDTO request) {
        Stratum stratum = new Stratum();
        stratum.setStratumName(request.stratumName());
        stratum.setDescription(request.description());
        stratum.setRecommendations(request.recommendations());
        stratum.setActive(true);

        return toDTO(stratumRepository.save(stratum));
    }

    @Override
    @Transactional
    public StratumDTO updateStratum(Long id, UpdateStratumDTO request) {
        Stratum stratum = stratumRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Stratum not found with ID: " + id));

        Optional.ofNullable(request.stratumName()).ifPresent(stratum::setStratumName);
        Optional.ofNullable(request.description()).ifPresent(stratum::setDescription);

        if (request.recommendationIds() != null) {
            Set<Recommendation> recommendations = request.recommendationIds().stream()
                    .map(recId -> recommendationRepository.findById(recId)
                            .orElseThrow(() -> new RuntimeException("Recommendation not found with ID: " + recId)))
                    .collect(Collectors.toSet());
            stratum.setRecommendations(recommendations);
        }

        return toDTO(stratumRepository.save(stratum));
    }

    @Override
    public void deleteStratum(Long id) {
        stratumRepository.findById(id)
                .ifPresentOrElse(stratum -> {
                    stratum.setActive(false);
                    stratumRepository.save(stratum);
                }, () -> {
                    throw new RuntimeException("Stratum not found with ID: " + id);
                });
    }

    private StratumDTO toDTO(Stratum stratum) {
        return new StratumDTO(
                stratum.getIdStratum(),
                stratum.getStratumName(),
                stratum.getDescription(),
                stratum.isActive()
        );
    }
}
package com.example.demo.service.user;

import com.example.demo.dao.user.User;
import com.example.demo.dao.user.dto.CreateUserDTO;
import com.example.demo.dao.user.dto.UpdateUserDTO;
import com.example.demo.dao.user.dto.UserDTO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.Optional;

public interface UserService {

    Page<UserDTO> listUsers(Pageable pageable);
    Optional<UserDTO> findUserById(Long id);
    User createUser(CreateUserDTO request);
    UserDTO updateUser(Long id, UpdateUserDTO request);
    void deleteUser(Long id);

}package com.example.demo.service.user;

import com.example.demo.dao.user.User;
import com.example.demo.dao.user.UserRepository;
import com.example.demo.dao.user.dto.CreateUserDTO;
import com.example.demo.dao.user.dto.UpdateUserDTO;
import com.example.demo.dao.user.dto.UserDTO;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
@AllArgsConstructor
@Transactional
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;

    @Override
    @Transactional(readOnly = true)
    public Page<UserDTO> listUsers(Pageable pageable) {
        return userRepository.findByActiveTrue(pageable)
                .map(this::toUserDTO);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<UserDTO> findUserById(Long id) {
        return userRepository.findById(id)
                .map(this::toUserDTO);
    }

    @Override
    public User createUser(CreateUserDTO request) {
        User user = new User();
        user.setName(request.username());
        user.setEmail(request.email());
        user.setPassword(request.password());
        user.setRole(request.role());
        user.setToken(request.token());
        user.setActive(true);

        return userRepository.save(user);
    }

    @Override
    public UserDTO updateUser(Long id, UpdateUserDTO request) {
        return userRepository.findById(id)
                .map(user -> {
                    user.setName(request.username());
                    Optional.ofNullable(request.password()).ifPresent(user::setPassword);

                    User updatedUser = userRepository.save(user);
                    return toUserDTO(updatedUser);
                })
                .orElseThrow(() -> new RuntimeException("User not found with ID: " + id));
    }

    @Override
    public void deleteUser(Long id) {
        userRepository.findById(id)
                .ifPresentOrElse(
                        user -> {
                            user.setActive(false);
                            userRepository.save(user);
                        },
                        () -> {
                            throw new RuntimeException("User not found with ID: " + id);
                        }
                );
    }

    private UserDTO toUserDTO(User user) {
        return new UserDTO(
                user.getIdUser(),
                user.getName(),
                user.getEmail(),
                user.getRole(),
                user.isActive(),
                user.getToken()
        );
    }
}
package com.example.demo.web.doctor;

import com.example.demo.dao.doctor.dto.*;
import com.example.demo.service.doctor.DoctorService;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import jakarta.validation.Valid;
import java.net.URI;

@RestController
@RequestMapping("/api/v1/doctors")
@AllArgsConstructor
public class DoctorController {
    private final DoctorService doctorService;

    @GetMapping
    public ResponseEntity<Page<DoctorDTO>> listDoctors(Pageable pageable) {
        Page<DoctorDTO> doctors = doctorService.listDoctors(pageable);
        return ResponseEntity.ok(doctors);
    }

    @GetMapping("/{id}")
    public ResponseEntity<DoctorDTO> getDoctorById(@PathVariable Long id) {
        return doctorService.findDoctorById(id)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<DoctorDTO> registerDoctor(
            @RequestBody @Valid CreateDoctorDTO request,
            UriComponentsBuilder uriComponentsBuilder) {
        DoctorDTO doctor = doctorService.createDoctor(request);
        URI location = uriComponentsBuilder.path("/api/v1/doctors/{id}")
                .buildAndExpand(doctor.idDoctor()).toUri();
        return ResponseEntity.created(location).body(doctor);
    }

    @PutMapping("/{id}")
    public ResponseEntity<DoctorDTO> updateDoctor(
            @PathVariable Long id,
            @RequestBody @Valid UpdateDoctorDTO request) {
        return ResponseEntity.ok(doctorService.updateDoctor(id, request));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteDoctor(@PathVariable Long id) {
        doctorService.deleteDoctor(id);
        return ResponseEntity.noContent().build();
    }
}
package com.example.demo.web.measurement;

import com.example.demo.dao.measurement.dto.MeasurementDTO;
import com.example.demo.service.measurement.MeasurementService;
import lombok.AllArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/measurements")
@AllArgsConstructor
public class MeasurementController {
    private final MeasurementService measurementService;

    @GetMapping("/{patientId}")
    public List<MeasurementDTO> listMeasurements(@PathVariable Long patientId) {
        return measurementService.listByPatientId(patientId);
    }

    @PostMapping
    public MeasurementDTO createMeasurement(@RequestBody MeasurementDTO request) {
        return measurementService.createMeasurement(request);
    }

    @PutMapping("/{id}")
    public MeasurementDTO updateMeasurement(@PathVariable Long id, @RequestBody MeasurementDTO request) {
        return measurementService.updateMeasurement(id, request);
    }

    @DeleteMapping("/{id}")
    public void deleteMeasurement(@PathVariable Long id) {
        measurementService.deleteMeasurement(id);
    }
}
package com.example.demo.web.medication;

import com.example.demo.dao.medication.dto.MedicationDTO;
import com.example.demo.service.medication.MedicationService;
import lombok.AllArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/medications")
@AllArgsConstructor
public class MedicationController {
    private final MedicationService medicationService;

    @GetMapping("/{patientId}")
    public List<MedicationDTO> listMedications(@PathVariable Long patientId) {
        return medicationService.listByPatientId(patientId);
    }

    @PostMapping
    public MedicationDTO createMedication(@RequestBody MedicationDTO request) {
        return medicationService.createMedication(request);
    }

    @PutMapping("/{id}")
    public MedicationDTO updateMedication(@PathVariable Long id, @RequestBody MedicationDTO request) {
        return medicationService.updateMedication(id, request);
    }

    @DeleteMapping("/{id}")
    public void deleteMedication(@PathVariable Long id) {
        medicationService.deleteMedication(id);
    }
}
package com.example.demo.web.patient;

import com.example.demo.dao.patient.dto.CreatePatientDTO;
import com.example.demo.dao.patient.dto.PatientDTO;
import com.example.demo.dao.patient.dto.UpdatePatientDTO;
import com.example.demo.service.patient.PatientService;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.Optional;

@RestController
@RequestMapping("/api/v1/patients")
@AllArgsConstructor
public class PatientController {

    private final PatientService patientService;

    @GetMapping
    public ResponseEntity<Page<PatientDTO>> listPatients(Pageable pageable) {
        Page<PatientDTO> patients = patientService.listPatients(pageable);
        return ResponseEntity.ok(patients);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Optional<PatientDTO>> getPatientById(@PathVariable Long id) {
        Optional<PatientDTO> patient = patientService.findPatientById(id);
        return patient.isPresent() ? ResponseEntity.ok(patient) : ResponseEntity.notFound().build();
    }

    @PostMapping
    public ResponseEntity<PatientDTO> registerPatient(@RequestBody @Valid CreatePatientDTO request, UriComponentsBuilder uriComponentsBuilder) {
        PatientDTO patient = patientService.createPatient(request);
        URI location = uriComponentsBuilder.path("/api/v1/patients/{id}").buildAndExpand(patient.idPatient()).toUri();
        return ResponseEntity.created(location).body(patient);
    }

    @PutMapping("/{id}")
    public ResponseEntity<PatientDTO> updatePatient(@PathVariable Long id, @RequestBody @Valid UpdatePatientDTO request) {
        return ResponseEntity.ok(patientService.updatePatient(id, request));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePatient(@PathVariable Long id) {
        patientService.deletePatient(id);
        return ResponseEntity.noContent().build();
    }
}
package com.example.demo.web.recommendation;

import com.example.demo.dao.recommendation.dto.*;
import com.example.demo.service.recommendation.RecommendationService;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import jakarta.validation.Valid;
import java.net.URI;

@RestController
@RequestMapping("/api/v1/recommendations")
@AllArgsConstructor
public class RecommendationController {

    private final RecommendationService recommendationService;

    @GetMapping
    public ResponseEntity<Page<RecommendationDTO>> listRecommendations(Pageable pageable) {
        return ResponseEntity.ok(recommendationService.listRecommendations(pageable));
    }

    @GetMapping("/{id}")
    public ResponseEntity<RecommendationDTO> getById(@PathVariable Long id) {
        return recommendationService.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<RecommendationDTO> create(
            @RequestBody @Valid CreateRecommendationDTO request,
            UriComponentsBuilder uriBuilder) {
        RecommendationDTO recommendation = recommendationService.create(request);
        URI location = uriBuilder.path("/api/v1/recommendations/{id}")
                .buildAndExpand(recommendation.id()).toUri();
        return ResponseEntity.created(location).body(recommendation);
    }

    @PutMapping("/{id}")
    public ResponseEntity<RecommendationDTO> update(
            @PathVariable Long id,
            @RequestBody @Valid CreateRecommendationDTO request) {
        return ResponseEntity.ok(recommendationService.update(id, request));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        recommendationService.delete(id);
        return ResponseEntity.noContent().build();
    }
}
package com.example.demo.web.stratum;

import com.example.demo.dao.stratum.dto.CreateStratumDTO;
import com.example.demo.dao.stratum.dto.StratumDTO;
import com.example.demo.dao.stratum.dto.UpdateStratumDTO;
import com.example.demo.service.stratum.StratumService;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.Optional;

@RestController
@RequestMapping("/api/v1/stratum")
@AllArgsConstructor
public class StratumController {

    private final StratumService stratumService;

    @GetMapping
    public ResponseEntity<Page<StratumDTO>> listStrata(Pageable pageable) {
        Page<StratumDTO> strata = stratumService.listStrata(pageable);
        return ResponseEntity.ok(strata);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Optional<StratumDTO>> getStratumById(@PathVariable Long id) {
        Optional<StratumDTO> stratum = stratumService.findStratumById(id);
        return stratum.isPresent() ? ResponseEntity.ok(stratum) : ResponseEntity.notFound().build();
    }

    @PostMapping
    public ResponseEntity<StratumDTO> registerStratum(@RequestBody @Valid CreateStratumDTO request, UriComponentsBuilder uriComponentsBuilder) {
        StratumDTO stratum = stratumService.createStratum(request);
        URI location = uriComponentsBuilder.path("/api/v1/strata/{id}").buildAndExpand(stratum.idStratum()).toUri();
        return ResponseEntity.created(location).body(stratum);
    }

    @PutMapping("/{id}")
    public ResponseEntity<StratumDTO> updateStratum(@PathVariable Long id, @RequestBody @Valid UpdateStratumDTO request) {
        return ResponseEntity.ok(stratumService.updateStratum(id, request));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteStratum(@PathVariable Long id) {
        stratumService.deleteStratum(id);
        return ResponseEntity.noContent().build();
    }
}

package com.example.demo.web.user;

import com.example.demo.dao.user.dto.UpdateUserDTO;
import com.example.demo.dao.user.dto.UserDTO;
import com.example.demo.service.user.UserService;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@AllArgsConstructor
@RestController
@RequestMapping("/api/v1/users")
public class UserController {

    private final UserService userService;

    /**
     * List all users with pagination.
     */
    @GetMapping
    public ResponseEntity<Page<UserDTO>> listUsers(Pageable pageable) {
        Page<UserDTO> users = userService.listUsers(pageable);
        return ResponseEntity.ok(users);
    }

    /**
     * Get user by ID.
     */
    @GetMapping("/{id}")
    public ResponseEntity<Optional<UserDTO>> getUserById(@PathVariable Long id) {
        Optional<UserDTO> user = userService.findUserById(id);
        return user.isPresent() ? ResponseEntity.ok(user) : ResponseEntity.notFound().build();
    }

    /**
     * Update an existing user.
     */
    @PutMapping("/{id}")
    public ResponseEntity<UserDTO> updateUser(
            @PathVariable Long id,
            @RequestBody @Valid UpdateUserDTO request) {
        UserDTO updatedUser = userService.updateUser(id, request);
        return ResponseEntity.ok(updatedUser);
    }

    /**
     * Soft delete a user.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        try {
            userService.deleteUser(id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
}
package com.example.demo;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class DemoApplicationTests {

    @Test
    void contextLoads() {
    }

}
